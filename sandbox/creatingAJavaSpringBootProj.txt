1.)Start a new spring starter proj
2.)Name and artifact must match and point to the same file location. Group and package must match naming convention is com.caden.nameOfProj
3.)Add dependencies spring dev tools and spring web then add tomcat and jstl in pom.xml below is what you need.
        <dependency>
                <groupId>org.apache.tomcat.embed</groupId>
                <artifactId>tomcat-embed-jasper</artifactId>
        </dependency>
        <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
        </dependency>
4.)In src/main/java create 4 new packages with the exact same name as the package above it but add to the end .controllers,  .services, .repositories, .models 
5.)Then add a class into that package titled HomeController Or whatever makes sense if its login and reg name it LogAndRegController 
6.)Drop: spring.mvc.view.prefix: /WEB-INF/ , and for MYSQL:

spring.datasource.url=jdbc:mysql://localhost:3306/<<YOUR_SCHEMA>>
spring.datasource.username=<<dbuser>>
spring.datasource.password=<<dbpassword>>
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update

Into application.properties 
7.)in src inside the main folder create a new folder entitled webapp inside webapp make a folder entitled WEB-INF this is where jsp files are kept 
8.)You need this: <%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %> tag at the top of every jsp page it allows you to display info using <c:out value=$"{}"/> and <c:forEach /> loops etc.
9.)In the controller above the main controller name you need @Controller to load jsp pages 
10.)Above every method you need @RequestMapping(path="/", method=RequestMethod.GET(or POST))
11.)Do a test method to register a index.jsp to make sure everythings linked up


CONNECTING TO MYSQL:

12.)First you must import JPA 
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <scope>runtime</scope>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
13.)dont forget in application.properties add
spring.datasource.url=jdbc:mysql://localhost:3306/<<YOUR_SCHEMA>>  --> must match SQL schema name 
spring.datasource.username=<<dbuser>>    --> root
spring.datasource.password=<<dbpassword>>   --> root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver -->dont touch 
spring.jpa.hibernate.ddl-auto=update  -->dont touch 
14.)In src/main/java you need to add the 4 packages referred to in step 4 
15.)Look at this example from learning platfrom 
 @Id: sets this as the primary key
 @GeneratedValue: sets this as an auto-incrementing value
 @Column: sets this as a column in your DB
 @DateTimeFormat: this is not a persistence annotation, but one from Spring that allows us to format dates more easily. In this case we know exactly how our dates will returned to us.
 @Entity
public class Book {
    @Id   -->this creates the id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)    --> this auto increments it
    private Long id;   -->this is declaring the id itself 
    @Column   -->telling mySQL to make a collumn
    @Size(min = 5, max = 200)   ---> setting size 
    private String title;  -->
    @Column
    @Size(min = 5, max = 200)
    private String description;
    
    @Column
    @Size(min = 3, max = 40)
    private String language;
    
    @Column
    @Min(100)
    private int numberOfPages;
    // This will not allow the createdAt column to be updated after creation
    @Column(updatable=false)
    @DateTimeFormat(pattern = "MM/dd/yyyy HH:mm:ss")
    private Date createdAt;
    @Column
    @DateTimeFormat(pattern = "MM/dd/yyyy HH:mm:ss")
    private Date updatedAt;
}
16.) Dont forget to add this dependency so you can have validations 
        <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

