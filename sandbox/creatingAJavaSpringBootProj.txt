1.)Start a new spring starter proj
2.)Name and artifact must match and point to the same file location. Group and package must match naming convention is com.caden.nameOfProj
3.)Add dependencies spring dev tools and spring web then add tomcat and jstl in pom.xml below is what you need.
        <dependency>
                <groupId>org.apache.tomcat.embed</groupId>
                <artifactId>tomcat-embed-jasper</artifactId>
        </dependency>
        <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
        </dependency>
4.)In src/main/java create 4 new packages with the exact same name as the package above it but add to the end .controllers,  .services, .repositories, .models 
5.)Then add a class into that package titled HomeController Or whatever makes sense if its login and reg name it LogAndRegController 
6.)Drop: spring.mvc.view.prefix: /WEB-INF/ , and for MYSQL:
spring.mvc.view.prefix: /WEB-INF/
spring.datasource.url=jdbc:mysql://localhost:3306/<<YOUR_SCHEMA>>
spring.datasource.username=<<dbuser>>
spring.datasource.password=<<dbpassword>>
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
Into application.properties 
7.) I like to start in models first determine what models you need the validations the relationships between them and construct them. You must declare them at the top of the class with @Entity And @Table(name="(name of class plural)") then 	
        @Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)     thses 3 line auto increments id when created 
        private Long id;
        private String name;
        private int age;

        @Column(updatable=false)   --> Protects from update and created to be manipulated 
	private Date createdAt;
	private Date updatedAt;
        	@PrePersist       --> Also protects from update and created to be manipulated
	protected void onCreate() {
		this.createdAt = new Date();
	}
	@PreUpdate
	protected void onUpdate() {
		this.updatedAt = new Date();
	}

8.)Once you have all this figured out genereate an empty constructer and then getters and setters for everything
9.) Get all the models figured out and then start the relationships between them 
        For OneToOne: On parent class you need @OneToOne(mappedBy="(*)", cascade=CascadeType.ALL, fetch=FetchType.LAZY) ex.
                                                                   this is my Album class which is the parent class and im connecting to a label class establashing one to one relationship:

                                                                   @OneToOne(mappedBy="*album", cascade=CascadeType.ALL, fetch=FetchType.LAZY)
	                                                           private Label label;


                                                                   this is what it looks like on the Label class:

                                                                   @OneToOne(fetch=FetchType.LAZY)
	                                                           @JoinColumn(name="album_id")  -->This is making the column linking the two tables in SQL
                                                                   private Album *album;
                                                 heres an example of one to many from the same project this time im connecting a song table 

        For OneToMany: Heres an example of one to many from the same project this time im connecting a song table
        to album table for a OneToMany relationship (Album Model):@OneToMany(mappedBy="album", cascade=CascadeType.ALL, fetch=FetchType.LAZY)
	                                                          private List<Song> songs;

                                                                for Song Model:
                                                                @ManyToOne(fetch=FetchType.LAZY)
                                                                @JoinColumn(name="album_id")
                                                                private Album album;
        Notice the small differences also its okay that the mappedBy name is the same

        For ManyToMany:                                 For many to many you have to create a new table that carries 2 foriegn keys for the 2 objects that are sharing the relationship
                                                        in the same albums project this is how the album model looks 
                                                        @ManyToMany(fetch=FetchType.LAZY)
                                                        @JoinTable(
                                                        name="likes",
                                                        joinColumns = @JoinColumn(name="user_id"),
                                                        inverseJoinColumns = @JoinColumn(name="album_id")
                                                        )

                                                        and this is the user model
                                                        @ManyToMany(fetch=FetchType.LAZY)
	                                                @JoinTable(
                                                        name="likes",
                                                        joinColumns = @JoinColumn(name="album_id"),
                                                        inverseJoinColumns = @JoinColumn(name="user_id")
                                                        )
	
	




10.)Once models are done relationships are set and your schema is made (make sure the name matches application.properties YOUR_SCHEMA)
test to make sure there connected in mySQL by inserting dummy data SELECT * FROM (Table name) 
INSERT INTO (table name)(key name, key name, etc) VALUES("value", "value", "value")
11.)Dont forget to generate all the getters and setters after you establash the relationships or make changes where its neccesary
7.)in src inside the main folder create a new folder entitled webapp inside webapp make a folder entitled WEB-INF this is where jsp files are kept 
8.)You need this: <%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %> tag at the top of every jsp page it allows you to display info using <c:out value=$"{}"/> and <c:forEach /> loops etc.
        p.s also you need <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>  for jstl forms to be used which are much better than HTML forms 
9.)In the controller above the main controller name you need @Controller to load jsp pages 
10.)Above every method you need @RequestMapping(path="/", method=RequestMethod.GET(or POST))
11.)Do a test method to register a index.jsp to make sure everythings linked up
SIDE NOTE: Dont forget some bootstrap <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

CONNECTING TO MYSQL:

12.)First you must import JPA 
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <scope>runtime</scope>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
13.)dont forget in application.properties add
spring.datasource.url=jdbc:mysql://localhost:3306/<<YOUR_SCHEMA>>  --> must match SQL schema name 
spring.datasource.username=<<dbuser>>    --> root
spring.datasource.password=<<dbpassword>>   --> root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver -->dont touch 
spring.jpa.hibernate.ddl-auto=update  -->dont touch 
14.)In src/main/java you need to add the 4 packages referred to in step 4 
15.)Look at this example from learning platfrom 
 @Id: sets this as the primary key
 @GeneratedValue: sets this as an auto-incrementing value
 @Column: sets this as a column in your DB
 @DateTimeFormat: this is not a persistence annotation, but one from Spring that allows us to format dates more easily. In this case we know exactly how our dates will returned to us.
 @Entity
public class Book {
    @Id   -->this creates the id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)    --> this auto increments it
    private Long id;   -->this is declaring the id itself 
    @Column   -->telling mySQL to make a collumn
    @Size(min = 5, max = 200)   ---> setting size 
    private String title;  -->
    @Column
    @Size(min = 5, max = 200)
    private String description;
    
    @Column
    @Size(min = 3, max = 40)
    private String language;
    
    @Column
    @Min(100)
    private int numberOfPages;
    // This will not allow the createdAt column to be updated after creation
    @Column(updatable=false)
    @DateTimeFormat(pattern = "MM/dd/yyyy HH:mm:ss")
    private Date createdAt;
    @Column
    @DateTimeFormat(pattern = "MM/dd/yyyy HH:mm:ss")
    private Date updatedAt;
}
16.) Dont forget to add this dependency so you can have validations 
        <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency> ---> BCrypt dependency
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>

